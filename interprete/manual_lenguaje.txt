TIPOS DE DATO:
ENTERO ejm: 24
NUMERO CON DECIMALES ejm: 34.78
VALOR DE VERDAD ejm: VERDADERO
TEXTO ejm: "prueba"
LISTA ejm: [1,"qqq",34.18,FALSO]
ARREGLO ejm: ARREGLO(8)
DICCIONARIO:
ejm: 
d=DICCIONARIO()
d["qqq"]=34
d["ww"]="prueba"

OPERADORES:
+ - * / != == >= <= < > RESTO DIV_ENTERA Y O NEGACION , ^ ( ) [ ] =
PARA ASIGNAR SE USA =
PARA COMPARAR SE USA ==

EJEMPLOS:
miarreglo[3] = 89

milista = [milista,nuevo_elemento]


PALABRAS RESERVADAS:
SI expresion
SINO_SI expresion
SINO
FIN_SI

MIENTRAS expresion
FIN_MIENTRAS

SUBRUTINA nombre_subrutina parametro1 parametro2 parametro3
DEVOLVER valor_retorno #opcional
FIN_SUBRUTINA

CLASES:

SE CREA UNA CLASE CON LA INSTRUCCION:
CLASE nombre_clase padre1 padre2 padre3 etc

SE CREAN ATRIBUTOS CON LA INSTRUCCION:
ATRIBUTOS nombre_clase att1 att2 att3 etc

SE CREAN METODOS CON:
METODO nombre_clase nombre_metodo parametro1 parametro2 parametro3
DEVOLVER valor_retorno #opcional
FIN_METODO


SUBRUTINAS PREDEFINIDAS:

ESCRIBIR(VALOR1,VALOR2,VALOR3,ETC) ESCRIBE LOS VALORES EN PANTALLA

LEER_TEXTO() LEE TEXTO EN PANTALLA Y DEVUELVE EL TEXTO LEIDO

LEER_NUMERO() LEE NUMERO CON DECIMALES EN PANTALLA Y DEVUELVE EL VALOR, DEVUELVE CERO SI NO SE INGRESA UN NUMERO VALIDO

LEER_ENTERO() LEE NUMERO ENTERO EN PANTALLA Y DEVUELVE EL VALOR, DEVUELVE CERO SI NO SE INGRESA UN NUMERO VALIDO, SI SE INGRESA UN NUMERO CON DECIMALES, DEVUELVE SOLO LA PARTE ENTERA

ARREGLO(cantidad_elementos) DEVUELVE UN ARREGLO CON cantidad_elementos ELEMENTOS, LOS ELEMENTOS SE INICIAN CON EL VALOR VACIO

LISTA() DEVUELVE UNA LISTA VACIA

ARREGLO_A_LISTA(arr) CONVIERTE EL ARREGLO A LISTA

LISTA_A_ARREGLO(lista) CONVIERTE LISTA A ARREGLO, LA LISTA DEBE TENER AL MENOS UN ELEMENTO

TIPO_DE(var) DEVUELVE EL TIPO DE DATO DE VAR COMO UNA CADENA DE TEXTO

CLASE_DE(objeto) DEVUELVE LA CLASE A LA QUE PERTENECE EL OBJETO

TXT_A_NUM(txt) CONVIERTE TEXTO A NUMERO

NUM_A_ENT(num) CONVIERTE NUMERO A ENTERO

ENT_A_NUM(ent) CONVIERTE ENTERO A NUMERO

NUM_A_TXT(num) CONVIERTE NUMERO A TEXTO

TXT_A_ENT(txt) CONVIERTE TEXTO A ENTERO

ENT_A_TXT(ent) CONVIERTE ENTERO A TEXTO

DICCIONARIO() CREA DICCIONARIO

EXISTE_CLAVE(dic,clave) VERIFICA SI EXISTE UNA CLAVE

INDICE_EN_LISTA(valor,lista) DEVUELVE EL INDICE DE valor EN lista, SI NO SE ENCUENTRA DEVUELVE -1

INDICE_EN_ARREGLO(valor,arreglo) DEVUELVE EL INDICE DE valor EN arreglo, SI NO SE ENCUENTRA DEVUELVE -1

CLAVES(dic) DEVUELVE UNA LISTA CON LAS CLAVES DEL DICCIONARIO dic

LONGITUD(valor) DEVUELVE CANTIDAD DE ELEMENTOS EN LISTA, DICCIONARIO, ARREGLO Y CANTIDAD CARACTERES EN TEXTO.

OBTENER_POST() DEVUELVE UN DICCIONARIO CON LOS NOMBRES Y VALORES DE LOS DATOS RECIBIDOS, TODOS LOS DATOS LOS DEVUELVE COMO TEXTO, SI SE QUIERE UTILIZARLOS DE OTRA FORMA (POR EJEMPLO ENTEROS, HAY QUE CONVERTIRLOS)

OBTENER_GET() DEVUELVE UN DICCIONARIO CON LOS NOMBRES Y VALORES DE LOS DATOS RECIBIDOS, TODOS LOS DATOS LOS DEVUELVE COMO TEXTO, SI SE QUIERE UTILIZARLOS DE OTRA FORMA (POR EJEMPLO ENTEROS, HAY QUE CONVERTIRLOS)

SQLITE3_OPEN("monbre bd") ABRE UNA BASE DE DATOS

SQLITE3_PREPARE("SELECT nombre,edad FROM datos where nombre=:nombre") PREPARA UNA SENTENCIA PARA SU EJECUCION, TENER EN CUENTA :nombre es un parametro que se pasara después con otra función para evitar el sql injection.

SQLITE3_BIND_TEXT(":nombre",nombre) PASO PARAMETRO TEXTO
SQLITE3_BIND_DOUBLE(":soles",soles) PASO PARAMETRO NUMERO CON DECIMALES
SQLITE3_BIND_INT(":edad",edad) PASO PARAMETRO ENTERO

SQLITE3_STEP() EJECUTA UNA SENTENCIA PREPARADA Y DEVUELVE VERDADERO SI ESTA DEVOLVIO UN REGISTRO

SQLITE3_COLUMN_TEXT(0) DEVUELVE UN TEXTO DE LA COLUMNA QUE SE PASE COM PARAMETRO (EMPIEZAN DE CERO)
SQLITE3_COLUMN_INT(1) DEVUELVE UN ENTERO DE LA COLUMNA QUE SE PASE COM PARAMETRO (EMPIEZAN DE CERO)
SQLITE3_COLUMN_DOUBLE(2) DEVUELVE UN NUMERO CON DECIMALES DE LA COLUMNA QUE SE PASE COM PARAMETRO (EMPIEZAN DE CERO)

SQLITE3_FINALIZE() LIMPIA EL ULTIMO SQLITE3_PREPARE, ES NECESARIO USARLA DESPUES DE TERMINAR DE UTILIZAR LOS DATOS OBTENIDOS CON UN PREPARE PARA EVITAR FUGAS DE MEMORIA

SQLITE3_CLOSE() CIERRA LA CONEXION CON LA BASE DE DATOS ABIERTA POR SQLITE3_OPEN


COMENTARIOS:
#ejemplo de comentario
#TENER EN CUENTA QUE ESTE LENGUAJE DISTINGUE MINUSCULAS DE MAYUSCULAS

EJEMPLOS DE CÓDIGO OBTENIDO DEL INTERPRETE INTERACTIVO:
Ingrese su codigo: txt="qwerty"

El texto es: qwerty
Ingrese su codigo: txt[2,4]

El texto es: wer
Ingrese su codigo: txt[2,5]+"dddd"

El texto es: wertdddd

EN EL INTERPRETE INTERACTIVO SE PUEDE USAR RPTA PARA ACCEDER AL ULTIMO RESULTADO Y SALIR PARA TERMINAR LA EJECUCION DLE INTERPRETE


#UN EJEMPLO CON CLASES Y HERENCIA:

CLASE A
ATRIBUTOS A x y
METODO A iniciar_a
    ESTE.x=5
    ESTE.y=7
FIN_METODO

CLASE B
ATRIBUTOS B nombre edad
METODO B iniciar_b n e
    ESTE.nombre=n
    ESTE.edad=e
FIN_METODO

CLASE C A B
METODO C iniciar_c
    ESTE.iniciar_a()
    ESTE.iniciar_b("Ruperto",39)
    ESTE.x=ESTE.x+5
FIN_METODO

obj=C()
obj.iniciar_c()

